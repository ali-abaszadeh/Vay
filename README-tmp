### Structure
# ./certificates
#   | --- ca/
#   |     | --- {ENV}ROOTCA.key
#   |     | --- {ENV}ROOTCA.pem
#   | --- certificates
#         | --- {DOMAINs}.crt

### ROOT CA
ENV=test
openssl genrsa -des3 -out ${ENV}ROOTCA.key 2048
openssl req -x509 -new -nodes -subj "/C=GR/CN=Vay ${ENV} Root CA/O=Vay/OU=DevOps" -key ${ENV}ROOTCA.key -sha256 -days 1825 -out ${ENV}ROOTCA.pem
openssl x509 -in ${ENV}ROOTCA.pem -inform PEM -out ${ENV}ROOTCA.crt

ublBcr9LM95j0GBhAQU5vQ2IIr3OPseX

### Install ROOT CA (Ubuntu)
sudo mkdir /usr/share/ca-certificates/extra
sudo cp ${ENV}/ca/${ENV}ROOTCA.crt /usr/share/ca-certificates/extra/
sudo echo "extra/${ENV}ROOTCA.crt" >> /etc/ca-certificates.conf
sudo update-ca-certificates

# In the container cases after this step you have to restart docker service
systemctl restart docker

#################################################################################


### DOMAIN CERT
DOMAIN=let.me.play
openssl genrsa -out ${DOMAIN}.key 2048
openssl req -subj "/C=GR/CN=${DOMAIN}/O=Vay/OU=DevOps" -new -key ${DOMAIN}.key -out ${DOMAIN}.csr
cat <<EOF > ${DOMAIN}.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${DOMAIN}
EOF

openssl x509 -req -in ${DOMAIN}.csr -CA ca/${ENV}ROOTCA.pem -CAkey ca/${ENV}ROOTCA.key -CAcreateserial \
-out ${DOMAIN}.crt -days 825 -sha256 -extfile ${DOMAIN}.ext

### DOMAIN Cert chain
cat ${DOMAIN}.key ${DOMAIN}.crt ca/${ENV}ROOTCA.crt > ${DOMAIN}.pem


###################################################################################################################
#    check SSL Match keys

# You can check whether a certificate matches a private key, or a CSR matches a certificate on your own computer by using the OpenSSL commands below:

openssl pkey -in privateKey.key -pubout -outform pem | sha256sum
openssl x509 -in certificate.crt -pubkey -noout -outform pem | sha256sum
openssl req -in CSR.csr -pubkey -noout -outform pem | sha256sum


#################################

# Git checkout to finding commit

git clone git_repository_address
git log
git checkout 285a495d

# Change at commit 285a495d
git reset --hard 285a495d

##################################

--with-file-aio
enables the use of asynchronous file I/O (AIO) on FreeBSD and Linux.

--with-http_ssl_module
enables building a module that adds the HTTPS protocol support to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module.

--with-http_v2_module
enables building a module that provides support for HTTP/2. This module is not built by default.

--with-select_module
--without-select_module
enables or disables building a module that allows the server to work with the select() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.

--with-threads
enables the use of thread pool

Defines the name and parameters of a thread pool used for multi-threaded reading and sending of files without blocking worker processes.

The threads parameter defines the number of threads in the pool.

In the event that all threads in the pool are busy, a new task will wait in the queue. The max_queue parameter limits the number of tasks allowed to be waiting in the queue. By default, up to 65536 tasks can wait in the queue. When the queue overflows, the task is completed with an error.

--without-poll_module
enables or disables building a module that allows the server to work with the poll() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.

####################################

# How can I run the project

git clone ali-abaszadeh

# Run pre build script
chmod +x pre-build.sh
./pre-build.sh

# Build the nginx image and run it
docker-compose up -d 

#####################################

# remove all build cache
docker builder prune -a

##################################### 


