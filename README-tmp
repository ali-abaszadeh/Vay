### Structure
# ./certificates
#   | --- ca/
#   |     | --- {ENV}ROOTCA.key
#   |     | --- {ENV}ROOTCA.pem
#   | --- certificates
#         | --- {DOMAINs}.crt

### ROOT CA
ENV=test
openssl genrsa -des3 -out ${ENV}ROOTCA.key 2048
openssl req -x509 -new -nodes -subj "/C=GR/CN=Vay ${ENV} Root CA/O=Vay/OU=DevOps" -key ${ENV}ROOTCA.key -sha256 -days 1825 -out ${ENV}ROOTCA.pem
openssl x509 -in ${ENV}ROOTCA.pem -inform PEM -out ${ENV}ROOTCA.crt

ublBcr9LM95j0GBhAQU5vQ2IIr3OPseX

### Install ROOT CA (Ubuntu)
sudo mkdir /usr/share/ca-certificates/extra
sudo cp ${ENV}/ca/${ENV}ROOTCA.crt /usr/share/ca-certificates/extra/
sudo echo "extra/${ENV}ROOTCA.crt" >> /etc/ca-certificates.conf
sudo update-ca-certificates

# In the container cases after this step you have to restart docker service
systemctl restart docker

#################################################################################


### DOMAIN CERT
DOMAIN=let.me.play
openssl genrsa -out ${DOMAIN}.key 2048
openssl req -subj "/C=GR/CN=${DOMAIN}/O=Vay/OU=DevOps" -new -key ${DOMAIN}.key -out ${DOMAIN}.csr
cat <<EOF > ${DOMAIN}.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${DOMAIN}
EOF

openssl x509 -req -in ${DOMAIN}.csr -CA ca/${ENV}ROOTCA.pem -CAkey ca/${ENV}ROOTCA.key -CAcreateserial \
-out ${DOMAIN}.crt -days 825 -sha256 -extfile ${DOMAIN}.ext

### DOMAIN Cert chain
cat ${DOMAIN}.key ${DOMAIN}.crt ca/${ENV}ROOTCA.crt > ${DOMAIN}.pem


###################################################################################################################
#    check SSL Match keys

# You can check whether a certificate matches a private key, or a CSR matches a certificate on your own computer by using the OpenSSL commands below:

openssl pkey -in privateKey.key -pubout -outform pem | sha256sum
openssl x509 -in certificate.crt -pubkey -noout -outform pem | sha256sum
openssl req -in CSR.csr -pubkey -noout -outform pem | sha256sum


#################################

# Git checkout to finding commit

git clone git_repository_address
git log
git checkout 285a495d

# Change at commit 285a495d
git reset --hard 285a495d

##################################

--with-file-aio
enables the use of asynchronous file I/O (AIO) on FreeBSD and Linux.

--with-http_ssl_module
enables building a module that adds the HTTPS protocol support to an HTTP server. This module is not built by default. The OpenSSL library is required to build and run this module.

--with-http_v2_module
enables building a module that provides support for HTTP/2. This module is not built by default.

--with-select_module
--without-select_module
enables or disables building a module that allows the server to work with the select() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.

--with-threads
enables the use of thread pool

Defines the name and parameters of a thread pool used for multi-threaded reading and sending of files without blocking worker processes.

The threads parameter defines the number of threads in the pool.

In the event that all threads in the pool are busy, a new task will wait in the queue. The max_queue parameter limits the number of tasks allowed to be waiting in the queue. By default, up to 65536 tasks can wait in the queue. When the queue overflows, the task is completed with an error.

--without-poll_module
enables or disables building a module that allows the server to work with the poll() method. This module is built automatically if the platform does not appear to support more appropriate methods such as kqueue, epoll, or /dev/poll.

##########################################

# Response Header Fields
We will study General-header and Entity-header in a separate chapter when we will learn HTTP header fields. For now, let's check what Response header fields are.

The response-header fields allow the server to pass additional information about the response which cannot be placed in the Status- Line. These header fields give information about the server and about further access to the resource identified by the Request-URI.

Accept-Ranges

Age

ETag

Location

Proxy-Authenticate

Retry-After

Server

Vary

WWW-Authenticate
#
You can introduce your custom fields in case you are going to write your own custom Web Client and Server.

S.N.	Code and Description
1	1xx: Informational
It means the request was received and the process is continuing.

2	2xx: Success
It means the action was successfully received, understood, and accepted.

3	3xx: Redirection
It means further action must be taken in order to complete the request.

4	4xx: Client Error
It means the request contains incorrect syntax or cannot be fulfilled.

5	5xx: Server Error
It means the server failed to fulfill an apparently valid request.

###################################
#
System load
To understand what these load averages tell us (and when to be alarmed), we'll first need to understand what system load means, and how it's counted.

The load of a system is essentially the number of processes active at any given time. When idle, the load is 0. When a process starts, the load is incremented by 1. A terminating process decrements the load by 1. Besides running processes, any process that's queued up is also counted. So, when one process is actively using the CPU, and two are waiting their turn, the load is 3.

The load fluctuates quickly because of short-lived processes and can jump from zero to 5 in milliseconds and back again the next instant. Because of this volatility, it's more useful to look at the average load over time, which gives a better overview of the load the system has been under.

Load averages
Now that we know how system load is counted, we can take a look at load averages. As we've seen, the load the system is under is usually shown as an average over time.

Generally, single-core CPU can handle one process at a time. An average load of 1.0 would mean that one core is busy 100% of the time. If the load average drops to 0.5, the CPU has been idle for 50% of the time.

If the load average rises to 1.5, the CPU was busy all the time while there was (on average) one other process waiting for 50% of the time, giving the CPU more work than it can handle.

At short

System load/CPU Load is a measurement of CPU over or under-utilization in a Linux system; the number of processes which are being executed by the CPU or in waiting state.
Load average is the average system load calculated over a given period of time of 1, 5 and 15 minutes.

$ uptime

07:13:53 up 8 days, 19 min,  1 user,  load average: 1.98, 2.15, 2.21

The numbers are read from left to right, and the output above means that:

load average over the last 1 minute is 1.98
load average over the last 5 minutes is 2.15
load average over the last 15 minutes is 2.21

####################################

# How can I run the project

git clone ali-abaszadeh

# Run pre build script
chmod +x pre-build.sh
./pre-build.sh

# Build the nginx image and run it using build.sh automatically

chmod +x build.sh
./build.sh

# OR Build the nginx image and run it using below commands manually
docker-compose build

docker-compose up -d

# Check let.me.play on your browser 
echo "$YOUR_HOST_IP let.me.play" >> /etc/hosts
curl https://let.me.play:10443
curl http://let.me.play:10080

# Check LOAD_AVARAGE and SYSTEM_ENTROPY
curl --head  https://let.me.play:10443

# Restart Nginx
chmod +x nginx.sh
nginx-reset.sh 

#####################################

# remove all build cache
docker builder prune -a

##################################### 


